# We only keep filters here.
# If you need to add a new input create a new 00-input-something.conf
# file and change docks/logstash/run.sh to copy it in the configuration
# area.
# If you need to add a new output create a new 99-output-something.conf file
# and change docks/logstash/run.sh to copy it in the configuration area.
filter {
  if "mesos_master_info" in [tags] {
    clone {
      clones => ["metric"]
      add_field => {  "metric" => "mesos_info/system mem_free_bytes %{system/mem_free_bytes}" }
      add_field => {  "metric" => "mesos_info/master uptime_secs %{master/uptime_secs}" }
      add_field => {  "metric" => "mesos_info/master tasks_lost %{master/tasks_lost}" }
      add_field => {  "metric" => "mesos_info/master slaves_active %{master/slaves_active}" }
      add_field => {  "metric" => "mesos_info/master cpus_percent %{master/cpus_percent}" }
      add_field => {  "metric" => "mesos_info/master mem_percent %{master/mem_percent}" }
      add_field => {  "metric" => "mesos_info/master elected %{master/elected}" }
    }
  }
  else if "marathon_metrics" in [tags] {
  }
  else if "various_metrics" in [tags] {
  }
  else if [message][0] =~ /Started by user/ {
    mutate {
      add_field => {"status" => "STARTED" }
      add_field => {"message_type" => "status"}
    }
  }
  else if [message][0] =~ /^Finished/ {
    grok {
      match => {"[message][0]" => "Finished: (?<status>[A-Z]+)"}
      add_field => {"message_type" => "status"}
    }
  }
  else if [message][0] =~ /^DEBUG:[^:]+:[^:]+: Commit hash for/ {
    grok {
      match => {"[message][0]" => "DEBUG:(?<main[name]>[^:]+):(?<main[hash]>[^:]+): Commit hash for (?<sources[repo]>[^@]*)@(?<sources[tag]>[^ ]*) is (?<sources[hash]>[^ ]*)"}
      add_field => {"message_type" => "sources"}
    }
  }
  else if [message][0] =~ /DEBUG:[^:]+:[^:]+:[ ]+[^:]*:[0-9]+:[0-9]+: warning:[ ]+(?!or)(?!but).*/ {
    grok {
      match => {"[message][0]" => "DEBUG:(?<main[name]>[^:]+):(?<main[hash]>[^:]+):[ ]+(/build/workarea/sw/[0-9]+/SOURCES/|/build/workarea/sw/[0-9]+/|)(?<filename>[^:]*):(?<line>[0-9]+):(?<column>[0-9]+): warning:[ ]+(?<what>.*)"}
      add_field => {"message_type" => "compilation_warning"}
    }
  }
  else if [message][0] =~ /DEBUG:[^:]+:[^:]+:[ ]+.*\/ld: warning:[ ].*/ {
    grok {
      match => {"[message][0]" => "DEBUG:(?<main[name]>[^:]+):(?<main[hash]>[^:]+):[ ]+(?<filename>[^:]*): warning:[ ]+(?<what>.*)"}
      add_field => {"message_type" => "compilation_error"}
    }
  }
  else if [message][0] =~ /DEBUG:[^:]+:[^:]+:[ ][0-9]+:aliroot-test:/ {
    grok {
      match => {"[message][0]" => "DEBUG:(?<main[name]>[^:]+):(?<main[hash]>[^:]+):[ ](?<test[timestamp]>[0-9]+):aliroot-test: (?<test[name]>[^ ]+) (?<test[status]>[A-Z]+)"}
      add_field => {"message_type" => "test_status"}
    }
  }
  else if [message][0] =~ /DEBUG: Using.*/ {
    grok {
      match => {"[message][0]" => "DEBUG: Using aliBuild from alibuild.(?<alibuild_hash>[a-f0-9]+) recipes in alidist.(?<alidist_hash>[a-f0-9]+)"}
      add_field => {"message_type" => "tools_info"}
    }
  }
  else {
    grok {
      match => {"[message][0]" => "DEBUG:(?<main[name]>[^:]+):(?<main[hash]>[^:]+):[ ]+(/build/workarea/sw/[0-9]+/SOURCES/|/build/workarea/sw/[0-9]+/|)(?<filename>[^:]*):(?<line>[0-9]+):(?<column>[0-9]+): fatal error:[ ]+(?<what>.*)"}
      add_field => {"message_type" => "compilation_error"}
    }
  }
  mutate {
    remove_field => ["message"]
  }

  if [type] == "metric" {
    split {
       field => "[metric]"
    }
    prune {
      whitelist_names => ["type", "@timestamp", "metric"]
    }
  }

  if "_grokparsefailure" in [tags] {
    drop { }
  }
}
