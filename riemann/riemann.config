; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)
(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))
    ; Create separate streams for entries in alibuild_log streams which
    ; have error: or warning: in the description.
    ; Error remain in the index for 3600 seconds.
    ; We set the metric to 1 so that we can count them, if needed afterwards
    (where
      (and
        (description #".*error:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_error"
            :ttl 3600 
            :metric 1
            :state "critical"
            } index)
    )
    (where
      (and
        (description #".*warning:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_warning"
             :ttl 3600
             :metric 1
             :state "warning"
            } index)
    )

   )
)

; Enable repl if DEBUG environment variable is defined
(if (System/getenv "DEBUG")
    (repl-server {:host "0.0.0.0"})
)
