; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Use elasticsearch as an event sync whenever you want to push events
; to our elasticsearch instance. Events are batched ever 5 seconds to
; reduce overhead.
(load-plugin "elasticsearch")

; Create a date which is ok for elasticsearch indices
(def elasticsearch (async-queue! :elasticsearch {:queue-size 1e3 :core-pool-size 4 :max-pool-size 4}
                     (batch 1000 5
                       (elasticsearch/elasticsearch-sync {:url (System/getenv "ELASTICSEARCH_HOST") 
                                                          :type-fn :type
                                                          :index-fn (fn [e] (elasticsearch/logstash-time-index 
                                                                              (str (:index e) "-") e))
                                                         }))))

; Slack configuration
(def slack-token (clojure.string/trim-newline (slurp "/secrets/riemann-slack-key")))
(def slack-org (or (System/getenv "SLACK_ORG") "alisw"))
(def slack-user (or (System/getenv "SLACK_USER") "ali-bot"))
(def credentials {:account slack-org :token slack-token})
(def slacker (slack credentials {:username slack-user
                                 :channel "#monitoring"
                                }))

(def buildinfrastructure-slack (slack credentials {:username slack-user
                                                   :channel "#buildinfrastructure"
                                }))

; A few limits to monitor an healthy mesos cluster.
(def min_mesos_slaves 10)
(def max_mesos_task_staging 2)

; Report to slack only once per hour.
(def report-to-slack (throttle 1 3600 slacker))

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)
(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))

    ; Anything which comes from mesos goes to marathon every minute.
    ; Since many metrics for different services match, we use the 
    ; by service to make sure we send at least one per kind.
    (where
      (service #"^mesos.*")
      (by [:service]
        (with {:type "metrics"
               :index "riemann-metrics"} 
              (throttle 1 60 elasticsearch)
        )
      )
    )
    ; Send disk information to elasticsearch, once per half hour
    (where
      (service #"^disk.*")
      (by [:host :service]
        (with {:type "metrics"
               :index "riemann-metrics"}
              (throttle 1 60 elasticsearch)
        )
      )
    )

    ; When we have a too active few mesos slaves, notify slack.    
    (where
      (and
        (service #"mesos master/slaves_active")
        (< metric min_mesos_slaves)
      )
      (throttle 1 3600 slacker)
    )

    ; "mesos health" expired, means Mesos checks have troubles.
    ; We throttle by 60 seconds to avoid flip-floppings.
    (changed-state {:init "ok"}
      (where
        (service #"mesos slave/health")
        (throttle 1 60 slacker)
      )
    )

    ; Consider ok a mesos slave which has more than one cpu.
    (where
      (service #"mesos slave/resources/cpus")
      (with {:service "mesos slave/health"
             :state "ok"
             :metric 1
             :ttl 60
            } reinject)
    )
    ; "marathon health" expired, means marathon checks have troubles.
    ; We throttle by 60 seconds to avoid flip-floppings.
    (changed-state {:init "ok"}
      (where
        (service #"marathon health")
        (throttle 1 60 slacker)
      )
    )

    ; When we have a too many task staging, it means we might have a
    ; stuck node. If this happens for more than 5 minutes, in a row,
    ; warn.
    (where
      (and
        (service #"mesos master/tasks_staging")
        (> metric max_mesos_task_staging)
      )
      (stable 300 (fn [e] (> (:metric e) max_mesos_task_staging)) 
        (throttle 1 3600 slacker))
    )

    ; When the master is not elected, we are in trouble
    (where
      (and
        (service #"mesos master/elected")
        (== metric 0)
      )
      (throttle 1 3600 slacker)
    )

    ; Monitor Marathon apps and report to slack when the number of instances
    ; drops to 0.
    (where
      (and
          (service #"marathon apps/.*/tasksRunning")
          (== metric 0)
      )
      (by [:service] (throttle 1 3600 slacker))
    )

    ; Any monitored disk above 50% usage should be a warning.
    (where
      (and
        (service #"disk /.*")
        (< 0.5 metric 0.8)
      )
      (with {:state "warning"} index)
      (with {:state "warning"} (by [:host] (throttle 1 3600 buildinfrastructure-slack)))
    )
    ; Any monitored disk above 80% usage should be a critical.
    (where
      (and
        (service #"disk /.*")
        (> metric 0.8)
      )
      (with {:state "critical"} index)
      (with {:state "critical"} (by [:host] (throttle 1 3600 buildinfrastructure-slack)))
    )

    ; Send events with critical state in alibuild_log to be slack.
    (where
      (and
        (service #"alibuild_log")
        (state "critical")
      )
      slacker
    )

    ; Create separate streams for entries in alibuild_log streams which
    ; have error: or warning: in the description.
    ; Error remain in the index for 3600 seconds.
    ; We set the metric to 1 so that we can count them, if needed afterwards
    (where
      (and
        (description #".*error:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_error"
            :ttl 3600 
            :metric 1
            :state "critical"
            } index)
      (with {:service "build_error"
             :state "critical"
             :type "build_error"
             :index "build_errors"
            } elasticsearch)
      (with {:service "build_error"
             :state "critical"
             :type "build_error"
            } slacker)
    )
    (where
      (and
        (description #".*warning:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_warning"
             :ttl 3600
             :metric 1
             :state "warning"
            } index)
      (with {:service "build_warning"
             :state "warning"
             :type "build_warning"
             :index "build_errors"
            } elasticsearch)
    )

   )
)

; Enable repl if DEBUG environment variable is defined
(if (System/getenv "DEBUG")
    (repl-server {:host "0.0.0.0"})
)
