; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Use elasticsearch as an event sync whenever you want to push events
; to our elasticsearch instance. Events are batched ever 5 seconds to
; reduce overhead.
(load-plugin "elasticsearch")
(def elasticsearch (async-queue! :elasticsearch {:queue-size 1e3 :core-pool-size 4 :max-pool-size 4}
                     (batch 1000 5
                       (elasticsearch/elasticsearch-sync {:url (System/getenv "ELASTICSEARCH_HOST") 
                                                          :type-fn :type}))))

; Slack configuration
(def slack-token (clojure.string/trim-newline (slurp "/secrets/riemann-slack-key")))
(def slack-org (or (System/getenv "SLACK_ORG") "alisw"))
(def slack-user (or (System/getenv "SLACK_USER") "ali-bot"))
(def credentials {:account slack-org :token slack-token})
(def slacker (slack credentials {:username slack-user
                                 :channel "#monitoring"
                                }))

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)
(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))
    
    ; Create separate streams for entries in alibuild_log streams which
    ; have error: or warning: in the description.
    ; Error remain in the index for 3600 seconds.
    ; We set the metric to 1 so that we can count them, if needed afterwards
    (where
      (and
        (description #".*error:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_error"
            :ttl 3600 
            :metric 1
            :state "critical"
            } index)
      (with {:service "build_error"
             :state "critical"
             :type "build_error"
            } elasticsearch)
      (with {:service "build_error"
             :state "critical"
             :type "build_error"
            } slacker)
    )
    (where
      (and
        (description #".*warning:.*")
        (service #"alibuild_log.*")
      )
      (with {:service "build_warning"
             :ttl 3600
             :metric 1
             :state "warning"
            } index)
      (with {:service "build_warning"
             :state "warning"
             :type "build_warning"
            } elasticsearch)
    )

   )
)

; Enable repl if DEBUG environment variable is defined
(if (System/getenv "DEBUG")
    (repl-server {:host "0.0.0.0"})
)
