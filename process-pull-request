#!/usr/bin/env python
from __future__ import print_function
from github import Github
from os.path import expanduser
from argparse import ArgumentParser
import yaml, logging
from logging import debug, info

import re
from sys import exit

TRIGERING_TESTS_MSG = 'The tests are being triggered in jenkins.'
TESTS_RESULTS_MSG = '[-|+]1'
# Just for the moment
DEFAULT_REPO = "alibuild"
DEFAULT_USER = "alisw"

class State(object):
  def __init__(self, name, trigger, properties):
    self.name = name
    self.trigger = trigger
    self.properties = properties
  def __str__(self):
    return "state %s : %s" % (self.name, self.properties) 

class Transition(object):
  def __init__(self, user, regexp, final_state):
    self.user = user
    self.regexp = regexp
    self.final_state = final_state

TRANSITIONS = [
  Transition("(alibuild|ktf)", 
             "A new PR just got opened.*",
             "ACKNOWLEDGED_STATE")
]

ACKNOWLEDGED_STATE_COMMENT = "A new PR just got opened. Let's see if a Bot can do anything..."

# Prepare various comments regardless of whether they will be made or not.
def format(s, **kwds):
  return s % kwds

#
# creates a properties file to trigger the test of the pull request
#
def create_properties_file_tests( pr_number ):
  out_file_name = 'trigger-tests-%s.properties' % pr_number
  if opts.dryRun:
    print('Not creating cleanup properties file (dry-run): %s' % out_file_name)
  else:
    print('Creating properties file %s' % out_file_name)
    out_file = open( out_file_name , 'w' )
    out_file.write( '%s=%s\n' % ( 'PULL_REQUEST_LIST', pr_number ) )
    out_file.close()

if __name__ == "__main__":
  parser = ArgumentParser(usage="process-pull-request <pull-request-id>")
  parser.add_argument("-n", "--dry-run", dest="dryRun", 
                      action="store_true", default=False,
                      help="Do not modify Github")
  parser.add_argument("-d", "--debug", dest="debug", 
                      action="store_true", default=False,
                      help="Be verbose in debug output")
  parser.add_argument("prString", nargs="+",
                      help="Pull request to process")
  args = parser.parse_args()
  # Setup logger.
  logger = logging.getLogger()
  loggerHandler = logging.StreamHandler()
  logger.addHandler(loggerHandler)

  loggerHandler.setFormatter(logging.Formatter('%(levelname)-5s: %(message)s'))
  if args.debug: logger.setLevel(logging.DEBUG)
  else: logger.setLevel(logging.INFO)
  repos = {}
  pullNotFound = []

  for prString in args.prString:
    loggerHandler.setFormatter(logging.Formatter('%%(levelname)-5s:%s: %%(message)s' % prString))
    info("Processing %s" % prString)
    # Normalize input to <user>/<repo>#<pr-id>
    if prString.isdigit():
      prString = "#" + prString
    repository, prId = prString.split("#")
    if not prId.isdigit():
      parser.error("`%s' is not a valid pull request. Format is [<user>/]<repository>#<pull request id>" % prString)
    prId = int(prId)
    if not repository:
      info("Repository not specified, using %s" % DEFAULT_REPO)
      repository = DEFAULT_REPO
    if not "/" in repository:
      info("User not specified, using %s." % DEFAULT_USER)
      repository = "%s/%s" % (DEFAULT_REPO, repository)

    # Get the pull request.
    if not repository in repos:
      gh = Github(login_or_token=open(expanduser("~/.github-token")).read().strip())
      repos[repository] = gh.get_repo(repository)
    repo = repos[repository]
    info(repo)
    try:
      pr = repo.get_pull(prId)
    except:
      info("PR %s not found. Will complain later." % prString)
      pullNotFound.append(prString)
      continue
    issue = repo.get_issue(prId)
    info(issue.title)

    # Processing comments, this will trigger state changes for the state machine.
    states = []
    states.append(State(name="INITIAL_STATE", trigger=None, properties={}))
    for comment in issue.get_comments():
      comment_date = comment.created_at
      commenter = comment.user.login
      first_line = comment.body
      info("Message from %s on %s" % (commenter, comment_date))
      info(first_line)
      for transition in TRANSITIONS:
        um = re.match(transition.user, commenter)
        m = re.match(transition.regexp, first_line)
        if um and m:
          states.append(State(name=transition.final_state,
                              trigger=um.groups()[0],
                              properties=m.groups()))
    
    if args.dryRun:
      commentOnPr = lambda pr, comment : print("%s will print:\n %s\n" % (pr, comment))
    else:
      commentOnPr = lambda pr, comment : pr.create_issue_comment(ACKNOWLEDGED_STATE_COMMENT)
    print(states)
    final_state = states.pop()
    print("Performing task for final state %s as triggered by %s." % (final_state.name, final_state.trigger))
    if final_state.name == "INITIAL_STATE":
      commentOnPr(pr, ACKNOWLEDGED_STATE_COMMENT)
